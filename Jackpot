#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import os
import urllib2
import json
import sqlite3
import random
import webbrowser
import re
import time
import requests

from urlparse import *


def GetMiddleStr(content, startStr, endStr):
    startIndex = content.index(startStr)
    if startIndex >= 0:
        startIndex += len(startStr)
    endIndex = content.index(endStr)
    return content[startIndex:endIndex]


def GetUsers():
    global Bilibili_Key
    GetTotalRepost()
    Tmp_count = 0
    Bilibili_Key = 0
    DynamicAPI = "https://api.live.bilibili.com/dynamic_repost/v1/dynamic_repost/view_repost?dynamic_id=" + Dynamic_id + "&offset="
    conn = sqlite3.connect('Bilibili_TMP.db')
    c = conn.cursor()
    while Tmp_count < Total_count:
        Tmp_DynamicAPI = DynamicAPI + str(Tmp_count)
        try:
            BiliJson = json.loads(GetMiddleStr(urllib2.urlopen(Tmp_DynamicAPI).read(), "comments\":", ",\"total"))
            for BiliJson_dict in BiliJson:
                Bilibili_UID = str(BiliJson_dict['uid'])
                Bilibili_Uname = BiliJson_dict['uname']
                Bilibili_Comment = BiliJson_dict['comment']
                Bilibili_Sql = "INSERT or REPLACE into Bilibili (UID,Uname,Comment,ID) VALUES (" + Bilibili_UID + ", '" + Bilibili_Uname + "', '" + Bilibili_Comment + "', " + str(
                    Bilibili_Key) + ")"
                c.execute(Bilibili_Sql)
                conn.commit()
                Bilibili_Key = Bilibili_Key + 1
        except:
            break
        Tmp_count = Tmp_count + 20
    else:
        Tmp_count = 0
    conn.close()


def GetTotalRepost():
    global Total_count
    global UP_UID
    DynamicAPI = "https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/get_dynamic_detail?dynamic_id=" + Dynamic_id
    BiliJson = json.loads(urllib2.urlopen(DynamicAPI).read())
    Total_count = BiliJson['data']['card']['desc']['repost']
    UP_UID = BiliJson['data']['card']['desc']['user_profile']['info']['uid']


def getComment():
    current_page = 1
    DynamicAPI = "https://api.live.bilibili.com/dynamic_repost/v1/dynamic_repost/view_repost?dynamic_id=" + Dynamic_id + "&offset=0"
    r = requests.get(DynamicAPI)
    r.encoding = 'utf-8'
    json_data = json.loads(r.text)
    href = json_data['data']['comments'][0]
    rid = href['detail']['desc']['origin']['rid']
    link1 = 'https://api.bilibili.com/x/v2/reply?&jsonp=jsonp&pn='
    link2 = '&type=11&oid='
    link3 = '&sort=2&_=1570498003332'
    comment_list = []
    pool = {}
    r = requests.get(link1 + str(current_page) + link2 + str(rid) + link3)
    json_data = json.loads(r.text)
    comments_num = json_data['data']['page']['count']
    pages_num = comments_num // 20 + 1

    while True:
        r = requests.get(link1 + str(current_page) + link2 + str(rid) + link3)
        r.encoding = 'utf-8'
        json_data1 = json.loads(r.text)

        if json_data1['data']['replies']:
            for reply in json_data1['data']['replies']:
                comment_list.append(
                    [str(reply['member']['mid']), reply['member']['uname'], reply['content']['message']])
                pool[str(reply['member']['mid'])] = reply['member']['uname'] + ':' + reply['content']['message']

        current_page += 1
        if current_page > pages_num:
            break
    return pool


def GetLuckyDog():
    Bilibili_Doge = random.randint(0, Bilibili_Key)
    pool = {}
    pool.update(getComment())
    conn = sqlite3.connect('Bilibili_TMP.db')
    c = conn.cursor()
    cursor = c.execute("SELECT UID from Bilibili where ID=" + str(Bilibili_Doge))
    res = cursor.fetchall()
    suc = True
    if len(res) > 0:

        suc = True
        cursor.close()
        conn.close()
        conn2 = sqlite3.connect('Bilibili_TMP.db')
        c2 = conn2.cursor()
        info_cursor = c2.execute("SELECT UID from Bilibili where ID=" + str(Bilibili_Doge))
        for row in info_cursor:
            for poolcmt in pool:
                if str(row[0]) == str(poolcmt):
                    print "ID:", row[0]
                    print "\n"
                    bilibili_open = raw_input(TellTime() + "Open page for direct message?(Y/N)");
                    if bilibili_open == "Y":
                        webbrowser.open("https://message.bilibili.com/#/whisper/mid" + str(row[0]))
                    elif bilibili_open == "y":
                        webbrowser.open("https://message.bilibili.com/#/whisper/mid" + str(row[0]))
                    elif bilibili_open == "Yes":
                        webbrowser.open("https://message.bilibili.com/#/whisper/mid" + str(row[0]))
                    elif bilibili_open == "yes":
                        webbrowser.open("https://message.bilibili.com/#/whisper/mid" + str(row[0]))
                    break
        conn2.close()
    else:
        suc = False
        cursor.close()
        conn.close()
        GetLuckyDog()


def DeleteDatabase():
    DB_path = os.getcwd() + os.sep + "Bilibili_TMP.db"
    try:
        os.remove(DB_path)

        print TellTime() + "Clearing cache..."
    except:
        print TellTime() + "Clearing cache..."


def CreateDatabase():
    conn = sqlite3.connect('Bilibili_TMP.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE Bilibili
       (UID INT PRIMARY KEY     NOT NULL,
       Uname           TEXT    NOT NULL,
       Comment           TEXT    NOT NULL,
       ID            INT      NOT NULL);''')
    conn.commit()
    conn.close()


def GetDynamicid():
    s = raw_input("Please Paste the link:")
    nums = re.findall(r'\d+', s)
    try:
        bilibili_domain = urlparse(s)[1]
        if bilibili_domain == "t.bilibili.com":
            print TellTime() + "Text type post"
            return str(nums[0])
        elif bilibili_domain == "h.bilibili.com":
            bilibili_docid = "https://api.vc.bilibili.com/link_draw/v2/doc/dynamic_id?doc_id=" + str(nums[0])
            Dynamic_id = GetMiddleStr(urllib2.urlopen(bilibili_docid).read(), "dynamic_id\":\"", "\"}}")
            print TellTime() + "Gallery type post"
            return str(Dynamic_id)
    except:
        print TellTime() + "Invalid link"
        os.system({"pause"})


def TellTime():
    localtime = "[" + str(time.strftime('%H:%M:%S', time.localtime(time.time()))) + "]"
    return localtime


if __name__ == '__main__':
    DeleteDatabase()
    print "initializing......"
    print "\n"
    Dynamic_id = str(GetDynamicid())
    TellTime()
    print TellTime() + "ID:" + Dynamic_id
    print TellTime() + "Acquiring data"
    CreateDatabase()
    GetUsers()
    print TellTime() + "Data Acquired"
    print TellTime() + "User Info:\n"
    GetLuckyDog()
    DeleteDatabase()
    os.system({"pause"})
